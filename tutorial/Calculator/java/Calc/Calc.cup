// -*- Java -*- This Cup file was machine-generated by BNFC
package Calc;

parser code {:
  public Calc.Absyn.Exp pExp() throws Exception
  {
	java_cup.runtime.Symbol res = parse();
	return (Calc.Absyn.Exp) res.value;
  }

public <B,A extends java.util.LinkedList<? super B>> A cons_(B x, A xs) { xs.addFirst(x); return xs; }

public void syntax_error(java_cup.runtime.Symbol cur_token)
{
	report_error("Syntax Error, trying to recover and continue parse...", cur_token);
}

public void unrecovered_syntax_error(java_cup.runtime.Symbol cur_token) throws java.lang.Exception
{
	throw new Exception("Unrecoverable Syntax Error");
}

:}

nonterminal Calc.Absyn.Exp Exp;
nonterminal Calc.Absyn.Exp Exp1;
nonterminal Calc.Absyn.Exp Exp2;

terminal _SYMB_0;    //   +
terminal _SYMB_1;    //   -
terminal _SYMB_2;    //   *
terminal _SYMB_3;    //   /
terminal _SYMB_4;    //   (
terminal _SYMB_5;    //   )



terminal Integer _INTEGER_;





start with Exp;


Exp ::= Exp:p_1 _SYMB_0 Exp1:p_3  {: RESULT = new Calc.Absyn.EAdd(p_1,p_3); :} 
  | Exp:p_1 _SYMB_1 Exp1:p_3  {: RESULT = new Calc.Absyn.ESub(p_1,p_3); :}
  | Exp1:p_1  {: RESULT = p_1; :}
;
Exp1 ::= Exp1:p_1 _SYMB_2 Exp2:p_3  {: RESULT = new Calc.Absyn.EMul(p_1,p_3); :} 
  | Exp1:p_1 _SYMB_3 Exp2:p_3  {: RESULT = new Calc.Absyn.EDiv(p_1,p_3); :}
  | Exp2:p_1  {: RESULT = p_1; :}
;
Exp2 ::= _INTEGER_:p_1  {: RESULT = new Calc.Absyn.EInt(p_1); :} 
  | _SYMB_4 Exp:p_2 _SYMB_5  {: RESULT = p_2; :}
;

